bb4feba4923a5e461a782cb6b7a5ffc1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventEmitter = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _invariant = _interopRequireDefault(require("invariant"));
var _reactNative = require("react-native");
var nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';
var EventEmitter = exports.EventEmitter = function () {
  function EventEmitter(nativeModule) {
    (0, _classCallCheck2.default)(this, EventEmitter);
    this._listenerCount = 0;
    if (nativeModule.__expo_module_name__ && _reactNative.NativeModules.EXReactNativeEventEmitter) {
      nativeModule.addListener = function () {
        var _NativeModules$EXReac;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return (_NativeModules$EXReac = _reactNative.NativeModules.EXReactNativeEventEmitter).addProxiedListener.apply(_NativeModules$EXReac, [nativeModule.__expo_module_name__].concat(args));
      };
      nativeModule.removeListeners = function () {
        var _NativeModules$EXReac2;
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return (_NativeModules$EXReac2 = _reactNative.NativeModules.EXReactNativeEventEmitter).removeProxiedListeners.apply(_NativeModules$EXReac2, [nativeModule.__expo_module_name__].concat(args));
      };
    }
    this._nativeModule = nativeModule;
    this._eventEmitter = new _reactNative.NativeEventEmitter(nativeModule);
  }
  (0, _createClass2.default)(EventEmitter, [{
    key: "addListener",
    value: function addListener(eventName, listener) {
      var _this = this,
        _subscription;
      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.startObserving) {
        this._nativeModule.startObserving();
      }
      this._listenerCount++;
      var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);
      var subscription = (_subscription = {}, (0, _defineProperty2.default)(_subscription, nativeEmitterSubscriptionKey, nativeEmitterSubscription), (0, _defineProperty2.default)(_subscription, "remove", function remove() {
        _this.removeSubscription(subscription);
      }), _subscription);
      return subscription;
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventName) {
      var removedListenerCount = this._eventEmitter.listenerCount ? this._eventEmitter.listenerCount(eventName) : this._eventEmitter.listeners(eventName).length;
      this._eventEmitter.removeAllListeners(eventName);
      this._listenerCount -= removedListenerCount;
      (0, _invariant.default)(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);
      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
        this._nativeModule.stopObserving();
      }
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];
      if (!nativeEmitterSubscription) {
        return;
      }
      if ('remove' in nativeEmitterSubscription) {
        nativeEmitterSubscription.remove();
      } else if ('removeSubscription' in this._eventEmitter) {
        this._eventEmitter.removeSubscription(nativeEmitterSubscription);
      }
      this._listenerCount--;
      delete subscription[nativeEmitterSubscriptionKey];
      subscription.remove = function () {};
      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
        this._nativeModule.stopObserving();
      }
    }
  }, {
    key: "emit",
    value: function emit(eventName) {
      var _this$_eventEmitter;
      for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        params[_key3 - 1] = arguments[_key3];
      }
      (_this$_eventEmitter = this._eventEmitter).emit.apply(_this$_eventEmitter, [eventName].concat(params));
    }
  }]);
  return EventEmitter;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW52YXJpYW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJuYXRpdmVFbWl0dGVyU3Vic2NyaXB0aW9uS2V5IiwiRXZlbnRFbWl0dGVyIiwiZXhwb3J0cyIsIm5hdGl2ZU1vZHVsZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJkZWZhdWx0IiwiX2xpc3RlbmVyQ291bnQiLCJfX2V4cG9fbW9kdWxlX25hbWVfXyIsIk5hdGl2ZU1vZHVsZXMiLCJFWFJlYWN0TmF0aXZlRXZlbnRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJfTmF0aXZlTW9kdWxlcyRFWFJlYWMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImFkZFByb3hpZWRMaXN0ZW5lciIsImFwcGx5IiwiY29uY2F0IiwicmVtb3ZlTGlzdGVuZXJzIiwiX05hdGl2ZU1vZHVsZXMkRVhSZWFjMiIsIl9sZW4yIiwiX2tleTIiLCJyZW1vdmVQcm94aWVkTGlzdGVuZXJzIiwiX25hdGl2ZU1vZHVsZSIsIl9ldmVudEVtaXR0ZXIiLCJOYXRpdmVFdmVudEVtaXR0ZXIiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJldmVudE5hbWUiLCJsaXN0ZW5lciIsIl90aGlzIiwiX3N1YnNjcmlwdGlvbiIsIlBsYXRmb3JtIiwiT1MiLCJzdGFydE9ic2VydmluZyIsIm5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJfZGVmaW5lUHJvcGVydHkyIiwicmVtb3ZlIiwicmVtb3ZlU3Vic2NyaXB0aW9uIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlZExpc3RlbmVyQ291bnQiLCJsaXN0ZW5lckNvdW50IiwibGlzdGVuZXJzIiwiaW52YXJpYW50Iiwic3RvcE9ic2VydmluZyIsImVtaXQiLCJfdGhpcyRfZXZlbnRFbWl0dGVyIiwiX2xlbjMiLCJwYXJhbXMiLCJfa2V5MyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9FdmVudEVtaXR0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgTmF0aXZlRXZlbnRFbWl0dGVyLCBOYXRpdmVNb2R1bGVzLCBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmNvbnN0IG5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb25LZXkgPSAnQEBuYXRpdmVFbWl0dGVyU3Vic2NyaXB0aW9uQEAnO1xuXG50eXBlIE5hdGl2ZU1vZHVsZSA9IHtcbiAgX19leHBvX21vZHVsZV9uYW1lX18/OiBzdHJpbmc7XG4gIHN0YXJ0T2JzZXJ2aW5nPzogKCkgPT4gdm9pZDtcbiAgc3RvcE9ic2VydmluZz86ICgpID0+IHZvaWQ7XG4gIGFkZExpc3RlbmVyOiAoZXZlbnROYW1lOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHJlbW92ZUxpc3RlbmVyczogKGNvdW50OiBudW1iZXIpID0+IHZvaWQ7XG59O1xuXG4vLyBAbmVlZHNBdWRpdFxuZXhwb3J0IHR5cGUgU3Vic2NyaXB0aW9uID0ge1xuICAvKipcbiAgICogQSBtZXRob2QgdG8gdW5zdWJzY3JpYmUgdGhlIGxpc3RlbmVyLlxuICAgKi9cbiAgcmVtb3ZlOiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlciB7XG4gIF9saXN0ZW5lckNvdW50ID0gMDtcbiAgX25hdGl2ZU1vZHVsZTogTmF0aXZlTW9kdWxlO1xuICBfZXZlbnRFbWl0dGVyOiBOYXRpdmVFdmVudEVtaXR0ZXI7XG5cbiAgY29uc3RydWN0b3IobmF0aXZlTW9kdWxlOiBOYXRpdmVNb2R1bGUpIHtcbiAgICAvLyBFeHBvIG1vZHVsZXMgaW5zdGFsbGVkIHRocm91Z2ggdGhlIEpTSSBkb24ndCBoYXZlIGBhZGRMaXN0ZW5lcmAgYW5kIGByZW1vdmVMaXN0ZW5lcnNgIHNldCxcbiAgICAvLyBzbyBpZiBzb21lb25lIHdhbnRzIHRvIHVzZSB0aGVtIHdpdGggYEV2ZW50RW1pdHRlcmAsIG1ha2Ugc3VyZSB0byBwcm92aWRlIHRoZXNlIGZ1bmN0aW9uc1xuICAgIC8vIGFzIHRoZXkgYXJlIHJlcXVpcmVkIGJ5IGBOYXRpdmVFdmVudEVtaXR0ZXJgLiBUaGlzIGlzIG9ubHkgdGVtcG9yYXJ5IOKAlCBpbiB0aGUgZnV0dXJlXG4gICAgLy8gSlNJIG1vZHVsZXMgd2lsbCBoYXZlIGV2ZW50IGVtaXR0ZXIgYnVpbHQgaW4uXG4gICAgaWYgKG5hdGl2ZU1vZHVsZS5fX2V4cG9fbW9kdWxlX25hbWVfXyAmJiBOYXRpdmVNb2R1bGVzLkVYUmVhY3ROYXRpdmVFdmVudEVtaXR0ZXIpIHtcbiAgICAgIG5hdGl2ZU1vZHVsZS5hZGRMaXN0ZW5lciA9ICguLi5hcmdzKSA9PlxuICAgICAgICBOYXRpdmVNb2R1bGVzLkVYUmVhY3ROYXRpdmVFdmVudEVtaXR0ZXIuYWRkUHJveGllZExpc3RlbmVyKFxuICAgICAgICAgIG5hdGl2ZU1vZHVsZS5fX2V4cG9fbW9kdWxlX25hbWVfXyxcbiAgICAgICAgICAuLi5hcmdzXG4gICAgICAgICk7XG4gICAgICBuYXRpdmVNb2R1bGUucmVtb3ZlTGlzdGVuZXJzID0gKC4uLmFyZ3MpID0+XG4gICAgICAgIE5hdGl2ZU1vZHVsZXMuRVhSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlci5yZW1vdmVQcm94aWVkTGlzdGVuZXJzKFxuICAgICAgICAgIG5hdGl2ZU1vZHVsZS5fX2V4cG9fbW9kdWxlX25hbWVfXyxcbiAgICAgICAgICAuLi5hcmdzXG4gICAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX25hdGl2ZU1vZHVsZSA9IG5hdGl2ZU1vZHVsZTtcbiAgICB0aGlzLl9ldmVudEVtaXR0ZXIgPSBuZXcgTmF0aXZlRXZlbnRFbWl0dGVyKG5hdGl2ZU1vZHVsZSBhcyBhbnkpO1xuICB9XG5cbiAgYWRkTGlzdGVuZXI8VD4oZXZlbnROYW1lOiBzdHJpbmcsIGxpc3RlbmVyOiAoZXZlbnQ6IFQpID0+IHZvaWQpOiBTdWJzY3JpcHRpb24ge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJDb3VudCAmJiBQbGF0Zm9ybS5PUyAhPT0gJ2lvcycgJiYgdGhpcy5fbmF0aXZlTW9kdWxlLnN0YXJ0T2JzZXJ2aW5nKSB7XG4gICAgICB0aGlzLl9uYXRpdmVNb2R1bGUuc3RhcnRPYnNlcnZpbmcoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9saXN0ZW5lckNvdW50Kys7XG4gICAgY29uc3QgbmF0aXZlRW1pdHRlclN1YnNjcmlwdGlvbiA9IHRoaXMuX2V2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB7XG4gICAgICBbbmF0aXZlRW1pdHRlclN1YnNjcmlwdGlvbktleV06IG5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb24sXG4gICAgICByZW1vdmU6ICgpID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gQHRzLWlnbm9yZTogdGhlIEV2ZW50RW1pdHRlciBpbnRlcmZhY2UgaGFzIGJlZW4gY2hhbmdlZCBpbiByZWFjdC1uYXRpdmVAMC42NC4wXG4gICAgY29uc3QgcmVtb3ZlZExpc3RlbmVyQ291bnQgPSB0aGlzLl9ldmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudFxuICAgICAgPyAvLyBAdHMtaWdub3JlOiB0aGlzIGlzIGF2YWlsYWJsZSBzaW5jZSAwLjY0XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50KGV2ZW50TmFtZSlcbiAgICAgIDogLy8gQHRzLWlnbm9yZTogdGhpcyBpcyBhdmFpbGFibGUgaW4gb2xkZXIgdmVyc2lvbnNcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmxpc3RlbmVycyhldmVudE5hbWUpLmxlbmd0aDtcbiAgICB0aGlzLl9ldmVudEVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZSk7XG4gICAgdGhpcy5fbGlzdGVuZXJDb3VudCAtPSByZW1vdmVkTGlzdGVuZXJDb3VudDtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLl9saXN0ZW5lckNvdW50ID49IDAsXG4gICAgICBgRXZlbnRFbWl0dGVyIG11c3QgaGF2ZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIgb2YgbGlzdGVuZXJzYFxuICAgICk7XG5cbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVyQ291bnQgJiYgUGxhdGZvcm0uT1MgIT09ICdpb3MnICYmIHRoaXMuX25hdGl2ZU1vZHVsZS5zdG9wT2JzZXJ2aW5nKSB7XG4gICAgICB0aGlzLl9uYXRpdmVNb2R1bGUuc3RvcE9ic2VydmluZygpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IG5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb25bbmF0aXZlRW1pdHRlclN1YnNjcmlwdGlvbktleV07XG4gICAgaWYgKCFuYXRpdmVFbWl0dGVyU3Vic2NyaXB0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCdyZW1vdmUnIGluIG5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgIC8vIGByZWFjdC1uYXRpdmUtd2ViQDAuMTcuMWAgZG9lc24ndCBzdXBwb3J0IGByZW1vdmVTdWJzY3JpcHRpb25gXG4gICAgICBuYXRpdmVFbWl0dGVyU3Vic2NyaXB0aW9uLnJlbW92ZSgpO1xuICAgIH0gZWxzZSBpZiAoJ3JlbW92ZVN1YnNjcmlwdGlvbicgaW4gdGhpcy5fZXZlbnRFbWl0dGVyKSB7XG4gICAgICB0aGlzLl9ldmVudEVtaXR0ZXIucmVtb3ZlU3Vic2NyaXB0aW9uKG5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb24hKTtcbiAgICB9XG4gICAgdGhpcy5fbGlzdGVuZXJDb3VudC0tO1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIGVtaXR0ZXIncyBpbnRlcm5hbCBzdGF0ZSByZW1haW5zIGNvcnJlY3QgZXZlbiBpZiBgcmVtb3ZlU3Vic2NyaXB0aW9uYCBpc1xuICAgIC8vIGNhbGxlZCBhZ2FpbiB3aXRoIHRoZSBzYW1lIHN1YnNjcmlwdGlvblxuICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25bbmF0aXZlRW1pdHRlclN1YnNjcmlwdGlvbktleV07XG5cbiAgICAvLyBSZWxlYXNlIGNsb3NlZC1vdmVyIHJlZmVyZW5jZXMgdG8gdGhlIGVtaXR0ZXJcbiAgICBzdWJzY3JpcHRpb24ucmVtb3ZlID0gKCkgPT4ge307XG5cbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVyQ291bnQgJiYgUGxhdGZvcm0uT1MgIT09ICdpb3MnICYmIHRoaXMuX25hdGl2ZU1vZHVsZS5zdG9wT2JzZXJ2aW5nKSB7XG4gICAgICB0aGlzLl9uYXRpdmVNb2R1bGUuc3RvcE9ic2VydmluZygpO1xuICAgIH1cbiAgfVxuXG4gIGVtaXQoZXZlbnROYW1lOiBzdHJpbmcsIC4uLnBhcmFtczogYW55W10pOiB2b2lkIHtcbiAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZW1pdChldmVudE5hbWUsIC4uLnBhcmFtcyk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFNRSw0QkFBNEIsR0FBRywrQkFBK0I7QUFBQyxJQWtCeERDLFlBQVksR0FBQUMsT0FBQSxDQUFBRCxZQUFBO0VBS3ZCLFNBQUFBLGFBQVlFLFlBQTBCO0lBQUEsSUFBQUMsZ0JBQUEsQ0FBQUMsT0FBQSxRQUFBSixZQUFBO0lBQUEsS0FKdENLLGNBQWMsR0FBRyxDQUFDO0lBU2hCLElBQUlILFlBQVksQ0FBQ0ksb0JBQW9CLElBQUlDLDBCQUFhLENBQUNDLHlCQUF5QixFQUFFO01BQ2hGTixZ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