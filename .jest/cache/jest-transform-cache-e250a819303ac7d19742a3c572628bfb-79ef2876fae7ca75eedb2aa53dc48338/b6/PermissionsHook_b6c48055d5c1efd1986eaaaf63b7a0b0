794a259c2702f2897e79f79fdc10feda
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPermissionHook = createPermissionHook;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _excluded = ["get", "request"];
function usePermission(methods, options) {
  var isMounted = (0, _react.useRef)(true);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    status = _useState2[0],
    setStatus = _useState2[1];
  var _ref = options || {},
    _ref$get = _ref.get,
    get = _ref$get === void 0 ? true : _ref$get,
    _ref$request = _ref.request,
    request = _ref$request === void 0 ? false : _ref$request,
    permissionOptions = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var getPermission = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var response = yield methods.getMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);
    if (isMounted.current) setStatus(response);
    return response;
  }), [methods.getMethod]);
  var requestPermission = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var response = yield methods.requestMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);
    if (isMounted.current) setStatus(response);
    return response;
  }), [methods.requestMethod]);
  (0, _react.useEffect)(function runMethods() {
    if (request) requestPermission();
    if (!request && get) getPermission();
  }, [get, request, requestPermission, getPermission]);
  (0, _react.useEffect)(function didMount() {
    isMounted.current = true;
    return function () {
      isMounted.current = false;
    };
  }, []);
  return [status, requestPermission, getPermission];
}
function createPermissionHook(methods) {
  return function (options) {
    return usePermission(methods, options);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2V4Y2x1ZGVkIiwidXNlUGVybWlzc2lvbiIsIm1ldGhvZHMiLCJvcHRpb25zIiwiaXNNb3VudGVkIiwidXNlUmVmIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZGVmYXVsdCIsInN0YXR1cyIsInNldFN0YXR1cyIsIl9yZWYiLCJfcmVmJGdldCIsImdldCIsIl9yZWYkcmVxdWVzdCIsInJlcXVlc3QiLCJwZXJtaXNzaW9uT3B0aW9ucyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJnZXRQZXJtaXNzaW9uIiwidXNlQ2FsbGJhY2siLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJyZXNwb25zZSIsImdldE1ldGhvZCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjdXJyZW50IiwicmVxdWVzdFBlcm1pc3Npb24iLCJyZXF1ZXN0TWV0aG9kIiwidXNlRWZmZWN0IiwicnVuTWV0aG9kcyIsImRpZE1vdW50IiwiY3JlYXRlUGVybWlzc2lvbkhvb2siXSwic291cmNlcyI6WyIuLi9zcmMvUGVybWlzc2lvbnNIb29rLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFBlcm1pc3Npb25SZXNwb25zZSB9IGZyb20gJy4vUGVybWlzc2lvbnNJbnRlcmZhY2UnO1xuXG4vLyBUaGVzZSB0eXBlcyBhcmUgaWRlbnRpY2FsLCBidXQgaW1wcm92ZXMgdGhlIHJlYWRhYmlsaXR5IGZvciBzdWdnZXN0aW9ucyBpbiBlZGl0b3JzXG50eXBlIFJlcXVlc3RQZXJtaXNzaW9uTWV0aG9kPFBlcm1pc3Npb24gZXh0ZW5kcyBQZXJtaXNzaW9uUmVzcG9uc2U+ID0gKCkgPT4gUHJvbWlzZTxQZXJtaXNzaW9uPjtcbnR5cGUgR2V0UGVybWlzc2lvbk1ldGhvZDxQZXJtaXNzaW9uIGV4dGVuZHMgUGVybWlzc2lvblJlc3BvbnNlPiA9ICgpID0+IFByb21pc2U8UGVybWlzc2lvbj47XG5cbmludGVyZmFjZSBQZXJtaXNzaW9uSG9va01ldGhvZHM8UGVybWlzc2lvbiBleHRlbmRzIFBlcm1pc3Npb25SZXNwb25zZSwgT3B0aW9ucyA9IG5ldmVyPiB7XG4gIC8qKiBUaGUgcGVybWlzc2lvbiBtZXRob2QgdGhhdCByZXF1ZXN0cyB0aGUgdXNlciB0byBncmFudCBwZXJtaXNzaW9uLiAqL1xuICByZXF1ZXN0TWV0aG9kOiAob3B0aW9ucz86IE9wdGlvbnMpID0+IFByb21pc2U8UGVybWlzc2lvbj47XG4gIC8qKiBUaGUgcGVybWlzc2lvbiBtZXRob2QgdGhhdCBvbmx5IGZldGNoZXMgdGhlIGN1cnJlbnQgcGVybWlzc2lvbiBzdGF0dXMuICovXG4gIGdldE1ldGhvZDogKG9wdGlvbnM/OiBPcHRpb25zKSA9PiBQcm9taXNlPFBlcm1pc3Npb24+O1xufVxuXG5pbnRlcmZhY2UgUGVybWlzc2lvbkhvb2tCZWhhdmlvciB7XG4gIC8qKiBJZiB0aGUgaG9vayBzaG91bGQgYXV0b21hdGljYWxseSBmZXRjaCB0aGUgY3VycmVudCBwZXJtaXNzaW9uIHN0YXR1cywgd2l0aG91dCBhc2tpbmcgdGhlIHVzZXIuICovXG4gIGdldD86IGJvb2xlYW47XG4gIC8qKiBJZiB0aGUgaG9vayBzaG91bGQgYXV0b21hdGljYWxseSByZXF1ZXN0IHRoZSB1c2VyIHRvIGdyYW50IHBlcm1pc3Npb24uICovXG4gIHJlcXVlc3Q/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBQZXJtaXNzaW9uSG9va09wdGlvbnM8T3B0aW9ucyBleHRlbmRzIG9iamVjdD4gPSBQZXJtaXNzaW9uSG9va0JlaGF2aW9yICYgT3B0aW9ucztcblxuLyoqXG4gKiBHZXQgb3IgcmVxdWVzdCBwZXJtaXNzaW9uIGZvciBwcm90ZWN0ZWQgZnVuY3Rpb25hbGl0eSB3aXRoaW4gdGhlIGFwcC5cbiAqIEl0IHVzZXMgc2VwYXJhdGUgcGVybWlzc2lvbiByZXF1ZXN0ZXJzIHRvIGludGVyYWN0IHdpdGggYSBzaW5nbGUgcGVybWlzc2lvbi5cbiAqIEJ5IGRlZmF1bHQsIHRoZSBob29rIHdpbGwgb25seSByZXRyaWV2ZSB0aGUgcGVybWlzc2lvbiBzdGF0dXMuXG4gKi9cbmZ1bmN0aW9uIHVzZVBlcm1pc3Npb248UGVybWlzc2lvbiBleHRlbmRzIFBlcm1pc3Npb25SZXNwb25zZSwgT3B0aW9ucyBleHRlbmRzIG9iamVjdD4oXG4gIG1ldGhvZHM6IFBlcm1pc3Npb25Ib29rTWV0aG9kczxQZXJtaXNzaW9uLCBPcHRpb25zPixcbiAgb3B0aW9ucz86IFBlcm1pc3Npb25Ib29rT3B0aW9uczxPcHRpb25zPlxuKTogW1Blcm1pc3Npb24gfCBudWxsLCBSZXF1ZXN0UGVybWlzc2lvbk1ldGhvZDxQZXJtaXNzaW9uPiwgR2V0UGVybWlzc2lvbk1ldGhvZDxQZXJtaXNzaW9uPl0ge1xuICBjb25zdCBpc01vdW50ZWQgPSB1c2VSZWYodHJ1ZSk7XG4gIGNvbnN0IFtzdGF0dXMsIHNldFN0YXR1c10gPSB1c2VTdGF0ZTxQZXJtaXNzaW9uIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IHsgZ2V0ID0gdHJ1ZSwgcmVxdWVzdCA9IGZhbHNlLCAuLi5wZXJtaXNzaW9uT3B0aW9ucyB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICBjb25zdCBnZXRQZXJtaXNzaW9uID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbWV0aG9kcy5nZXRNZXRob2QoXG4gICAgICBPYmplY3Qua2V5cyhwZXJtaXNzaW9uT3B0aW9ucykubGVuZ3RoID4gMCA/IChwZXJtaXNzaW9uT3B0aW9ucyBhcyBPcHRpb25zKSA6IHVuZGVmaW5lZFxuICAgICk7XG4gICAgaWYgKGlzTW91bnRlZC5jdXJyZW50KSBzZXRTdGF0dXMocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgW21ldGhvZHMuZ2V0TWV0aG9kXSk7XG5cbiAgY29uc3QgcmVxdWVzdFBlcm1pc3Npb24gPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtZXRob2RzLnJlcXVlc3RNZXRob2QoXG4gICAgICBPYmplY3Qua2V5cyhwZXJtaXNzaW9uT3B0aW9ucykubGVuZ3RoID4gMCA/IChwZXJtaXNzaW9uT3B0aW9ucyBhcyBPcHRpb25zKSA6IHVuZGVmaW5lZFxuICAgICk7XG4gICAgaWYgKGlzTW91bnRlZC5jdXJyZW50KSBzZXRTdGF0dXMocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgW21ldGhvZHMucmVxdWVzdE1ldGhvZF0pO1xuXG4gIHVzZUVmZmVjdChcbiAgICBmdW5jdGlvbiBydW5NZXRob2RzKCkge1xuICAgICAgaWYgKHJlcXVlc3QpIHJlcXVlc3RQZXJtaXNzaW9uKCk7XG4gICAgICBpZiAoIXJlcXVlc3QgJiYgZ2V0KSBnZXRQZXJtaXNzaW9uKCk7XG4gICAgfSxcbiAgICBbZ2V0LCByZXF1ZXN0LCByZXF1ZXN0UGVybWlzc2lvbiwgZ2V0UGVybWlzc2lvbl1cbiAgKTtcblxuICAvLyBXb3JrYXJvdW5kIGZvciB1bm1vdW50aW5nIGNvbXBvbmVudHMgcmVjZWl2aW5nIHN0YXRlIHVwZGF0ZXNcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uIGRpZE1vdW50KCkge1xuICAgIGlzTW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIFtzdGF0dXMsIHJlcXVlc3RQZXJtaXNzaW9uLCBnZXRQZXJtaXNzaW9uXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgcGVybWlzc2lvbiBob29rIHdpdGggdGhlIHBlcm1pc3Npb24gbWV0aG9kcyBidWlsdC1pbi5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcXVpY2tseSBjcmVhdGUgc3BlY2lmaWMgcGVybWlzc2lvbiBob29rcyBpbiBldmVyeSBtb2R1bGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQZXJtaXNzaW9uSG9vazxQZXJtaXNzaW9uIGV4dGVuZHMgUGVybWlzc2lvblJlc3BvbnNlLCBPcHRpb25zIGV4dGVuZHMgb2JqZWN0PihcbiAgbWV0aG9kczogUGVybWlzc2lvbkhvb2tNZXRob2RzPFBlcm1pc3Npb24sIE9wdGlvbnM+XG4pIHtcbiAgcmV0dXJuIChvcHRpb25zPzogUGVybWlzc2lvbkhvb2tPcHRpb25zPE9wdGlvbnM+KSA9PlxuICAgIHVzZVBlcm1pc3Npb248UGVybWlzc2lvbiwgT3B0aW9ucz4obWV0aG9kcywgb3B0aW9ucyk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQWlFLElBQUFDLFNBQUE7QUE2QmpFLFNBQVNDLGFBQWFBLENBQ3BCQyxPQUFtRCxFQUNuREMsT0FBd0M7RUFFeEMsSUFBTUMsU0FBUyxHQUFHLElBQUFDLGFBQU0sRUFBQyxJQUFJLENBQUM7RUFDOUIsSUFBQUMsU0FBQSxHQUE0QixJQUFBQyxlQUFRLEVBQW9CLElBQUksQ0FBQztJQUFBQyxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBSixTQUFBO0lBQXRESyxNQUFNLEdBQUFILFVBQUE7SUFBRUksU0FBUyxHQUFBSixVQUFBO0VBQ3hCLElBQUFLLElBQUEsR0FBOERWLE9BQU8sSUFBSSxFQUFFO0lBQUFXLFFBQUEsR0FBQUQsSUFBQSxDQUFuRUUsR0FBRztJQUFIQSxHQUFHLEdBQUFELFFBQUEsY0FBRyxJQUFJLEdBQUFBLFFBQUE7SUFBQUUsWUFBQSxHQUFBSCxJQUFBLENBQUVJLE9BQU87SUFBUEEsT0FBTyxHQUFBRCxZQUFBLGNBQUcsS0FBSyxHQUFBQSxZQUFBO0lBQUtFLGlCQUFpQixPQUFBQyx5QkFBQSxDQUFBVCxPQUFBLEVBQUFHLElBQUEsRUFBQWIsU0FBQTtFQUV6RCxJQUFNb0IsYUFBYSxHQUFHLElBQUFDLGtCQUFXLE1BQUFDLGtCQUFBLENBQUFaLE9BQUEsRUFBQyxhQUFXO0lBQzNDLElBQU1hLFFBQVEsU0FBU3JCLE9BQU8sQ0FBQ3NCLFNBQVMsQ0FDdENDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDUixpQkFBaUIsQ0FBQyxDQUFDUyxNQUFNLEdBQUcsQ0FBQyxHQUFJVCxpQkFBNkIsR0FBR1UsU0FBUyxDQUN2RjtJQUNELElBQUl4QixTQUFTLENBQUN5QixPQUFPLEVBQUVqQixTQUFTLENBQUNXLFFBQVEsQ0FBQztJQUMxQyxPQUFPQSxRQUFRO0VBQ2pCLENBQUMsR0FBRSxDQUFDckIsT0FBTyxDQUFDc0IsU0FBUyxDQUFDLENBQUM7RUFFdkIsSUFBTU0saUJBQWlCLEdBQUcsSUFBQVQsa0JBQVcsTUFBQUMsa0JBQUEsQ0FBQVosT0FBQSxFQUFDLGFBQVc7SUFDL0MsSUFBTWEsUUFBUSxTQUFTckIsT0FBTyxDQUFDNkIsYUFBYSxDQUMxQ04sTUFBTSxDQUFDQyxJQUFJLENBQUNSLGlCQUFpQixDQUFDLENBQUNTLE1BQU0sR0FBRyxDQUFDLEdBQUlULGlCQUE2QixHQUFHVSxTQUFTLENBQ3ZGO0lBQ0QsSUFBSXhCLFNBQVMsQ0FBQ3lCLE9BQU8sRUFBRWpCLFNBQVMsQ0FBQ1csUUFBUSxDQUFDO0lBQzFDLE9BQU9BLFFBQVE7RUFDakIsQ0FBQyxHQUFFLENBQUNyQixPQUFPLENBQUM2QixhQUFhLENBQUMsQ0FBQztFQUUzQixJQUFBQyxnQkFBUyxFQUNQLFNBQVNDLFVBQVVBLENBQUE7SUFDakIsSUFBSWhCLE9BQU8sRUFBRWEsaUJBQWlCLEVBQUU7SUFDaEMsSUFBSSxDQUFDYixPQUFPLElBQUlGLEdBQUcsRUFBRUssYUFBYSxFQUFFO0VBQ3RDLENBQUMsRUFDRCxDQUFDTCxHQUFHLEVBQUVFLE9BQU8sRUFBRWEsaUJBQWlCLEVBQUVWLGFBQWEsQ0FBQyxDQUNqRDtFQUdELElBQUFZLGdCQUFTLEVBQUMsU0FBU0UsUUFBUUEsQ0FBQTtJQUN6QjlCLFNBQVMsQ0FBQ3lCLE9BQU8sR0FBRyxJQUFJO0lBQ3hCLE9BQU8sWUFBSztNQUNWekIsU0FBUyxDQUFDeUIsT0FBTyxHQUFHLEtBQUs7SUFDM0IsQ0FBQztFQUNILENBQUMsRUFBRSxFQUFFLENBQUM7RUFFTixPQUFPLENBQUNsQixNQUFNLEVBQUVtQixpQkFBaUIsRUFBRVYsYUFBYSxDQUFDO0FBQ25EO0FBTU0sU0FBVWUsb0JBQW9CQSxDQUNsQ2pDLE9BQW1EO0VBRW5ELE9BQU8sVUFBQ0MsT0FBd0M7SUFBQSxPQUM5Q0YsYUFBYSxDQUFzQkMsT0FBTyxFQUFFQyxPQUFPLENBQUM7RUFBQTtBQUN4RCJ9