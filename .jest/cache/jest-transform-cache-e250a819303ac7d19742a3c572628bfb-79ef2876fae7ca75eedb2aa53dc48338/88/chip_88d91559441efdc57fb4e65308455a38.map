{"file":"/Users/niallbarber/Developer/steps-count-plus/src/design-system/components/atoms/chip/chip.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA,+CAA0C;AAC1C,sDAAwC;AACxC,6DAAwD;AACxD,yDAAsD;AACtD,gEAA6D;AAC7D,2EAAwE;AAExE,2DAAwD;AAExD,uDAA+D;AAC/D,yDAAsD;AACtD,uEAA6D;AAE7D,mEAAgE;AAchE,SAAwB,IAAI,CAAC,EAC3B,IAAI,GAAG,OAAO,EACd,UAAU,GAAG,KAAK,EAClB,MAAM,EACN,IAAI,EACJ,KAAK,EACL,KAAK,EACL,OAAO,EACP,GAAG,IAAI,EACG;IACV,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,GAAG,IAAA,uCAAkB,GAAE,CAAC;IAErE,MAAM,gBAAgB,GAAgC;QACpD,KAAK,EAAE;YACL,eAAe,EAAE,UAAU;gBACzB,CAAC,CAAC,sBAAM,CAAC,yBAAyB;gBAClC,CAAC,CAAC,sBAAM,CAAC,2BAA2B;SACvC;QACD,IAAI,EAAE;YACJ,eAAe,EAAE,UAAU;gBACzB,CAAC,CAAC,sBAAM,CAAC,6BAA6B;gBACtC,CAAC,CAAC,sBAAM,CAAC,+BAA+B;SAC3C;KACF,CAAC;IAEF,MAAM,MAAM,GAAG,yBAAU,CAAC,MAAM,CAAC;QAC/B,SAAS,EAAE;YACT,MAAM,EAAE,cAAO,CAAC,MAAM,CAAC,IAAI,aAAK,CAAC,MAAM,CAAC;YACxC,iBAAiB,EAAE,aAAK,CAAC,MAAM,CAAC;YAChC,YAAY,EAAE,eAAM,CAAC,IAAI;YACzB,UAAU,EAAE,QAAQ;YACpB,cAAc,EAAE,QAAQ;YACxB,GAAG,gBAAgB,CAAC,IAAI,CAAC;YACzB,GAAG,IAAA,eAAM,GAAE;YACX,KAAK,EAAE,aAAM,CAAC,KAAK,CAAC;SACrB;QACD,IAAI,EAAE;YACJ,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAM,CAAC,KAAK;SAC3C;KACF,CAAC,CAAC;IAEH,SAAS,aAAa;QACpB,OAAO,IAAI,OAAO,EAAE,CAAC;QACrB,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACzD,CAAC;IAED,OAAO,CACL,oBAAC,qBAAS,IAAC,KAAK,EAAE,MAAM,CAAC,SAAS,EAAE,OAAO,EAAE,aAAa,KAAM,IAAI;QAClE,oBAAC,WAAI,IAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,EAAC,MAAM,EAAC,IAAI,EAAE,IAAI,IAC/C,KAAK,CACD,CACG,CACb,CAAC;AACJ,CAAC;AAtDD,uBAsDC","names":[],"sources":["/Users/niallbarber/Developer/steps-count-plus/src/design-system/components/atoms/chip/chip.tsx"],"sourcesContent":["// @ts-nocheck\nimport type { ViewStyle } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport * as Haptics from \"expo-haptics\";\nimport { colors } from \"@/design-system/color/palettes\";\nimport { shadow } from \"@/design-system/color/shadow\";\nimport { Text } from \"@/design-system/components/atoms/text\";\nimport { Pressable } from \"@/design-system/components/common/pressable\";\nimport type { PressableProps } from \"@/design-system/components/common/pressable/pressable\";\nimport { radius } from \"@/design-system/layouts/radius\";\nimport type { Height, Width } from \"@/design-system/layouts/size\";\nimport { heights, widths } from \"@/design-system/layouts/size\";\nimport { space } from \"@/design-system/layouts/space\";\nimport { tokens } from \"@/design-system/theme/design-tokens\";\nimport type { FontSizes } from \"@/design-system/typography/font-size\";\nimport { useButtonAnimation } from \"@/hooks/useButtonAnimation\";\n\ntype ChipMode = \"light\" | \"dark\";\ninterface ChipProps extends PressableProps {\n  mode?: ChipMode;\n  height?: Height;\n  size?: FontSizes;\n  a11yLabel: string;\n  label: string;\n  isSelected?: boolean;\n  width?: Width;\n  onPress?: (...args: any[]) => void;\n}\n\nexport default function Chip({\n  mode = \"light\",\n  isSelected = false,\n  height,\n  size,\n  label,\n  width,\n  onPress,\n  ...rest\n}: ChipProps) {\n  const { onPress: onPressHook, animatedStyle } = useButtonAnimation();\n\n  const backgroundStyles: Record<ChipMode, ViewStyle> = {\n    light: {\n      backgroundColor: isSelected\n        ? tokens.chipActiveBackgroundColor\n        : tokens.chipInactiveBackgroundColor,\n    },\n    dark: {\n      backgroundColor: isSelected\n        ? tokens.chipDarkActiveBackgroundColor\n        : tokens.chipDarkInactiveBackgroundColor,\n    },\n  };\n\n  const styles = StyleSheet.create({\n    container: {\n      height: heights[height] ?? space[\"38px\"],\n      paddingHorizontal: space[\"15px\"],\n      borderRadius: radius.full,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      ...backgroundStyles[mode],\n      ...shadow(),\n      width: widths[width],\n    },\n    text: {\n      color: isSelected ? \"white\" : colors.black,\n    },\n  });\n\n  function handleOnPress() {\n    onPress && onPress();\n    onPressHook(\"in\");\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n  }\n\n  return (\n    <Pressable style={styles.container} onPress={handleOnPress} {...rest}>\n      <Text style={styles.text} weight=\"bold\" size={size}>\n        {label}\n      </Text>\n    </Pressable>\n  );\n}\n"],"version":3}