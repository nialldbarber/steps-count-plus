{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_requireNativeModule","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","nativeComponentsCache","Map","requireCachedNativeComponent","viewName","cachedNativeComponent","get","nativeComponent","requireNativeComponent","set","requireNativeViewManager","viewManagersMetadata","NativeModules","NativeUnimoduleProxy","viewManagerConfig","__DEV__","exportedViewManagerNames","Object","keys","join","console","warn","reactNativeViewName","ReactNativeComponent","NativeComponent","_React$PureComponent","_inherits2","_super","_this","_classCallCheck2","_len","length","args","Array","_key","concat","nativeTag","_createClass2","key","value","componentDidMount","findNodeHandle","render","React","createElement","assign","props","PureComponent","displayName","nativeModule","requireNativeModule","nativeViewPrototype","ViewPrototype","_unused"],"sources":["../src/NativeViewManagerAdapter.native.tsx"],"sourcesContent":["import React from 'react';\nimport { findNodeHandle, NativeModules, requireNativeComponent, HostComponent } from 'react-native';\n\nimport { requireNativeModule } from './requireNativeModule';\n\n// To make the transition from React Native's `requireNativeComponent` to Expo's\n// `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in\n// replacement for `requireNativeComponent`.\n//\n// For each view manager, we create a wrapper component that accepts all of the props available to\n// the author of the universal module. This wrapper component splits the props into two sets: props\n// passed to React Native's View (ex: style, testID) and custom view props, which are passed to the\n// adapter view component in a prop called `proxiedProperties`.\n\n/**\n * A map that caches registered native components.\n */\nconst nativeComponentsCache = new Map<string, HostComponent<any>>();\n\n/**\n * Requires a React Native component from cache if possible. This prevents\n * \"Tried to register two views with the same name\" errors on fast refresh, but\n * also when there are multiple versions of the same package with native component.\n */\nfunction requireCachedNativeComponent<Props>(viewName: string): HostComponent<Props> {\n  const cachedNativeComponent = nativeComponentsCache.get(viewName);\n\n  if (!cachedNativeComponent) {\n    const nativeComponent = requireNativeComponent<Props>(viewName);\n    nativeComponentsCache.set(viewName, nativeComponent);\n    return nativeComponent;\n  }\n  return cachedNativeComponent;\n}\n\n/**\n * A drop-in replacement for `requireNativeComponent`.\n */\nexport function requireNativeViewManager<P>(viewName: string): React.ComponentType<P> {\n  const { viewManagersMetadata } = NativeModules.NativeUnimoduleProxy;\n  const viewManagerConfig = viewManagersMetadata?.[viewName];\n\n  if (__DEV__ && !viewManagerConfig) {\n    const exportedViewManagerNames = Object.keys(viewManagersMetadata).join(', ');\n    console.warn(\n      `The native view manager required by name (${viewName}) from NativeViewManagerAdapter isn't exported by expo-modules-core. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`\n    );\n  }\n\n  // Set up the React Native native component, which is an adapter to the universal module's view\n  // manager\n  const reactNativeViewName = `ViewManagerAdapter_${viewName}`;\n  const ReactNativeComponent = requireCachedNativeComponent(reactNativeViewName);\n\n  class NativeComponent extends React.PureComponent<P> {\n    static displayName = viewName;\n\n    // This will be accessed from native when the prototype functions are called,\n    // in order to find the associated native view.\n    nativeTag: number | null = null;\n\n    componentDidMount(): void {\n      this.nativeTag = findNodeHandle(this);\n    }\n\n    render(): React.ReactNode {\n      return <ReactNativeComponent {...this.props} />;\n    }\n  }\n\n  try {\n    const nativeModule = requireNativeModule(viewName);\n    const nativeViewPrototype = nativeModule.ViewPrototype;\n\n    if (nativeViewPrototype) {\n      // Assign native view functions to the component prototype so they can be accessed from the ref.\n      Object.assign(NativeComponent.prototype, nativeViewPrototype);\n    }\n  } catch {\n    // `requireNativeModule` may throw an error when the native module cannot be found.\n    // In some tests we don't mock the entire modules, but we do want to mock native views. For now,\n    // until we still have to support the legacy modules proxy and don't have better ways to mock,\n    // let's just gracefully skip assigning the prototype functions.\n    // See: https://github.com/expo/expo/blob/main/packages/expo-modules-core/src/__tests__/NativeViewManagerAdapter-test.native.tsx\n  }\n\n  return NativeComponent;\n}\n"],"mappings":"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"}