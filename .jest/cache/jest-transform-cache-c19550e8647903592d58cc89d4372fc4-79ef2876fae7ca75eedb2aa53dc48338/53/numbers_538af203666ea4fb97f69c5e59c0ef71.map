{"file":"/Users/niallbarber/Developer/personal/step-count-plus/__tests__/lib/numbers.ts","mappings":";;AAAA,2CAA6C;AAE7C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,MAAM,CAAC,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,MAAM;AACN,yDAAyD;AACzD,gBAAgB;AAChB,qBAAqB;AACrB,MAAM;AACN,gFAAgF;AAEhF,6DAA6D","names":[],"sources":["/Users/niallbarber/Developer/personal/step-count-plus/__tests__/lib/numbers.ts"],"sourcesContent":["import { formatNumber } from \"@/lib/numbers\";\n\ndescribe(\"lib -> numbers\", () => {\n  describe(\"formatNumber\", () => {\n    expect(formatNumber(2000)).toBe(\"2,000\");\n  });\n});\n\n// /**\n//  * Example: // 3500 -> '3,500' if in US English locale\n//  * @param num\n//  * @returns string\n//  */\n// export const formatNumber = (num: number) => Intl.NumberFormat().format(num);\n\n// export const roundDown = (num: number) => Math.round(num);\n"],"version":3}