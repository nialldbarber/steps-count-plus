05d7b28e95d7287ecc83d17a32f5284a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deprecate;
var _compareVersions = _interopRequireDefault(require("compare-versions"));
var _CodedError = require("./errors/CodedError");
var postedWarnings = {};
function deprecate(library, deprecatedAPI) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var currentVersion = options.currentVersion,
    versionToRemove = options.versionToRemove,
    replacement = options.replacement;
  var code = codeFromLibrary(library);
  var key = `${code}:${deprecatedAPI}:${replacement}`;
  if (!postedWarnings[key]) {
    postedWarnings[key] = true;
  }
  if (!currentVersion || !versionToRemove || (0, _compareVersions.default)(currentVersion, versionToRemove) >= 0) {
    var _message = `\`${deprecatedAPI}\` has been removed`;
    if (versionToRemove) {
      _message = `${_message} as of version "${versionToRemove}"`;
    }
    if (replacement && replacement.length) {
      _message = `${_message} please migrate to: \`${replacement}\``;
    }
    throw new _CodedError.CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, _message));
  }
  var message = `\`${deprecatedAPI}\` has been deprecated`;
  if (replacement && replacement.length) {
    message = `${message} in favor of \`${replacement}\``;
  }
  if (versionToRemove && versionToRemove.length) {
    message = `${message} and will be removed in version "${versionToRemove}"`;
  }
  console.warn(prependLibrary(library, message));
}
function prependLibrary(library, message) {
  return `${library}: ${message}`;
}
function codeFromLibrary(library) {
  var code = library.replace(/[-.]/g, '_').toUpperCase();
  return code;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29tcGFyZVZlcnNpb25zIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfQ29kZWRFcnJvciIsInBvc3RlZFdhcm5pbmdzIiwiZGVwcmVjYXRlIiwibGlicmFyeSIsImRlcHJlY2F0ZWRBUEkiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiY3VycmVudFZlcnNpb24iLCJ2ZXJzaW9uVG9SZW1vdmUiLCJyZXBsYWNlbWVudCIsImNvZGUiLCJjb2RlRnJvbUxpYnJhcnkiLCJrZXkiLCJjb21wYXJlVmVyc2lvbnMiLCJtZXNzYWdlIiwiQ29kZWRFcnJvciIsInByZXBlbmRMaWJyYXJ5IiwiY29uc29sZSIsIndhcm4iLCJyZXBsYWNlIiwidG9VcHBlckNhc2UiXSwic291cmNlcyI6WyIuLi9zcmMvZGVwcmVjYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wYXJlVmVyc2lvbnMgZnJvbSAnY29tcGFyZS12ZXJzaW9ucyc7XG5cbmltcG9ydCB7IENvZGVkRXJyb3IgfSBmcm9tICcuL2Vycm9ycy9Db2RlZEVycm9yJztcblxuY29uc3QgcG9zdGVkV2FybmluZ3M6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9ID0ge307XG5cbi8qKlxuICogVXNlZCBmb3IgZGVwcmVjYXRpbmcgdmFsdWVzIGFuZCB0aHJvd2luZyBhbiBlcnJvciBpZiBhIGdpdmVuIHZlcnNpb24gb2YgRXhwbyBoYXMgcGFzc2VkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXByZWNhdGUoXG4gIGxpYnJhcnk6IHN0cmluZyxcbiAgZGVwcmVjYXRlZEFQSTogc3RyaW5nLFxuICBvcHRpb25zOiB7XG4gICAgcmVwbGFjZW1lbnQ/OiBzdHJpbmc7XG4gICAgY3VycmVudFZlcnNpb24/OiBzdHJpbmc7XG4gICAgdmVyc2lvblRvUmVtb3ZlPzogc3RyaW5nO1xuICB9ID0ge31cbik6IHZvaWQge1xuICBjb25zdCB7IGN1cnJlbnRWZXJzaW9uLCB2ZXJzaW9uVG9SZW1vdmUsIHJlcGxhY2VtZW50IH0gPSBvcHRpb25zO1xuICBjb25zdCBjb2RlID0gY29kZUZyb21MaWJyYXJ5KGxpYnJhcnkpO1xuICBjb25zdCBrZXkgPSBgJHtjb2RlfToke2RlcHJlY2F0ZWRBUEl9OiR7cmVwbGFjZW1lbnR9YDtcbiAgaWYgKCFwb3N0ZWRXYXJuaW5nc1trZXldKSB7XG4gICAgcG9zdGVkV2FybmluZ3Nba2V5XSA9IHRydWU7XG4gIH1cblxuICBpZiAoXG4gICAgIWN1cnJlbnRWZXJzaW9uIHx8XG4gICAgIXZlcnNpb25Ub1JlbW92ZSB8fFxuICAgIGNvbXBhcmVWZXJzaW9ucyhjdXJyZW50VmVyc2lvbiwgdmVyc2lvblRvUmVtb3ZlKSA+PSAwXG4gICkge1xuICAgIGxldCBtZXNzYWdlID0gYFxcYCR7ZGVwcmVjYXRlZEFQSX1cXGAgaGFzIGJlZW4gcmVtb3ZlZGA7XG4gICAgaWYgKHZlcnNpb25Ub1JlbW92ZSkge1xuICAgICAgbWVzc2FnZSA9IGAke21lc3NhZ2V9IGFzIG9mIHZlcnNpb24gXCIke3ZlcnNpb25Ub1JlbW92ZX1cImA7XG4gICAgfVxuICAgIGlmIChyZXBsYWNlbWVudCAmJiByZXBsYWNlbWVudC5sZW5ndGgpIHtcbiAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBwbGVhc2UgbWlncmF0ZSB0bzogXFxgJHtyZXBsYWNlbWVudH1cXGBgO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBDb2RlZEVycm9yKGBFUlJfREVQUkVDQVRFRF9BUElgLCBwcmVwZW5kTGlicmFyeShsaWJyYXJ5LCBtZXNzYWdlKSk7XG4gIH1cblxuICBsZXQgbWVzc2FnZSA9IGBcXGAke2RlcHJlY2F0ZWRBUEl9XFxgIGhhcyBiZWVuIGRlcHJlY2F0ZWRgO1xuICBpZiAocmVwbGFjZW1lbnQgJiYgcmVwbGFjZW1lbnQubGVuZ3RoKSB7XG4gICAgbWVzc2FnZSA9IGAke21lc3NhZ2V9IGluIGZhdm9yIG9mIFxcYCR7cmVwbGFjZW1lbnR9XFxgYDtcbiAgfVxuICBpZiAodmVyc2lvblRvUmVtb3ZlICYmIHZlcnNpb25Ub1JlbW92ZS5sZW5ndGgpIHtcbiAgICBtZXNzYWdlID0gYCR7bWVzc2FnZX0gYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIFwiJHt2ZXJzaW9uVG9SZW1vdmV9XCJgO1xuICB9XG4gIGNvbnNvbGUud2FybihwcmVwZW5kTGlicmFyeShsaWJyYXJ5LCBtZXNzYWdlKSk7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRMaWJyYXJ5KGxpYnJhcnk6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke2xpYnJhcnl9OiAke21lc3NhZ2V9YDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gZm9ybWF0OlxuICogRXhwby5BUiAtPiBFWFBPX0FSXG4gKiBleHBvLWFyIC0+IEVYUE9fQVJcbiAqL1xuZnVuY3Rpb24gY29kZUZyb21MaWJyYXJ5KGxpYnJhcnk6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGNvZGUgPSBsaWJyYXJ5LnJlcGxhY2UoL1stLl0vZywgJ18nKS50b1VwcGVyQ2FzZSgpO1xuICByZXR1cm4gY29kZTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxnQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBTUUsY0FBYyxHQUErQixFQUFFO0FBS3ZDLFNBQVVDLFNBQVNBLENBQy9CQyxPQUFlLEVBQ2ZDLGFBQXFCLEVBS2Y7RUFBQSxJQUpOQyxPQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUlJLEVBQUU7RUFFTixJQUFRRyxjQUFjLEdBQW1DSixPQUFPLENBQXhESSxjQUFjO0lBQUVDLGVBQWUsR0FBa0JMLE9BQU8sQ0FBeENLLGVBQWU7SUFBRUMsV0FBVyxHQUFLTixPQUFPLENBQXZCTSxXQUFXO0VBQ3BELElBQU1DLElBQUksR0FBR0MsZUFBZSxDQUFDVixPQUFPLENBQUM7RUFDckMsSUFBTVcsR0FBRyxHQUFHLEdBQUdGLElBQUksSUFBSVIsYUFBYSxJQUFJTyxXQUFXLEVBQUU7RUFDckQsSUFBSSxDQUFDVixjQUFjLENBQUNhLEdBQUcsQ0FBQyxFQUFFO0lBQ3hCYixjQUFjLENBQUNhLEdBQUcsQ0FBQyxHQUFHLElBQUk7O0VBRzVCLElBQ0UsQ0FBQ0wsY0FBYyxJQUNmLENBQUNDLGVBQWUsSUFDaEIsSUFBQUssd0JBQWUsRUFBQ04sY0FBYyxFQUFFQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQ3JEO0lBQ0EsSUFBSU0sUUFBTyxHQUFHLEtBQUtaLGFBQWEscUJBQXFCO0lBQ3JELElBQUlNLGVBQWUsRUFBRTtNQUNuQk0sUUFBTyxHQUFHLEdBQUdBLFFBQU8sbUJBQW1CTixlQUFlLEdBQUc7O0lBRTNELElBQUlDLFdBQVcsSUFBSUEsV0FBVyxDQUFDSixNQUFNLEVBQUU7TUFDckNTLFFBQU8sR0FBRyxHQUFHQSxRQUFPLHlCQUF5QkwsV0FBVyxJQUFJOztJQUc5RCxNQUFNLElBQUlNLHNCQUFVLENBQUMsb0JBQW9CLEVBQUVDLGNBQWMsQ0FBQ2YsT0FBTyxFQUFFYSxRQUFPLENBQUMsQ0FBQzs7RUFHOUUsSUFBSUEsT0FBTyxHQUFHLEtBQUtaLGFBQWEsd0JBQXdCO0VBQ3hELElBQUlPLFdBQVcsSUFBSUEsV0FBVyxDQUFDSixNQUFNLEVBQUU7SUFDckNTLE9BQU8sR0FBRyxHQUFHQSxPQUFPLGtCQUFrQkwsV0FBVyxJQUFJOztFQUV2RCxJQUFJRCxlQUFlLElBQUlBLGVBQWUsQ0FBQ0gsTUFBTSxFQUFFO0lBQzdDUyxPQUFPLEdBQUcsR0FBR0EsT0FBTyxvQ0FBb0NOLGVBQWUsR0FBRzs7RUFFNUVTLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDRixjQUFjLENBQUNmLE9BQU8sRUFBRWEsT0FBTyxDQUFDLENBQUM7QUFDaEQ7QUFFQSxTQUFTRSxjQUFjQSxDQUFDZixPQUFlLEVBQUVhLE9BQWU7RUFDdEQsT0FBTyxHQUFHYixPQUFPLEtBQUthLE9BQU8sRUFBRTtBQUNqQztBQU9BLFNBQVNILGVBQWVBLENBQUNWLE9BQWU7RUFDdEMsSUFBTVMsSUFBSSxHQUFHVCxPQUFPLENBQUNrQixPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDQyxXQUFXLEVBQUU7RUFDeEQsT0FBT1YsSUFBSTtBQUNiIn0=