{"version":3,"names":["_expoModulesCore","require","_ExpoHaptics","_interopRequireDefault","_Haptics","notificationAsync","_notificationAsync","apply","arguments","_asyncToGenerator2","default","type","length","undefined","NotificationFeedbackType","Success","ExpoHaptics","UnavailabilityError","impactAsync","_impactAsync","style","ImpactFeedbackStyle","Medium","selectionAsync","_selectionAsync"],"sources":["../src/Haptics.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n// @needsAudit\n/**\n * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,gBAAA,GAAAC,OAAA;AAEA,IAAAC,YAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,QAAA,GAAAH,OAAA;AAAgF,SAU1DI,iBAAiBA,CAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,mBAAA;EAAAA,kBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAhC,aAC4D;IAAA,IAAjEC,IAAA,GAAAH,SAAA,CAAAI,MAAA,QAAAJ,SAAA,QAAAK,SAAA,GAAAL,SAAA,MAAiCM,iCAAwB,CAACC,OAAO;IAEjE,IAAI,CAACC,oBAAW,CAACX,iBAAiB,EAAE;MAClC,MAAM,IAAIY,oCAAmB,CAAC,SAAS,EAAE,mBAAmB,CAAC;;IAE/D,MAAMD,oBAAW,CAACX,iBAAiB,CAACM,IAAI,CAAC;EAC3C,CAAC;EAAA,OAAAL,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SASqBU,WAAWA,CAAA;EAAA,OAAAC,YAAA,CAAAZ,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAW,aAAA;EAAAA,YAAA,OAAAV,kBAAA,CAAAC,OAAA,EAA1B,aACkD;IAAA,IAAvDU,KAAA,GAAAZ,SAAA,CAAAI,MAAA,QAAAJ,SAAA,QAAAK,SAAA,GAAAL,SAAA,MAA6Ba,4BAAmB,CAACC,MAAM;IAEvD,IAAI,CAACN,oBAAW,CAACE,WAAW,EAAE;MAC5B,MAAM,IAAID,oCAAmB,CAAC,QAAQ,EAAE,aAAa,CAAC;;IAExD,MAAMD,oBAAW,CAACE,WAAW,CAACE,KAAK,CAAC;EACtC,CAAC;EAAA,OAAAD,YAAA,CAAAZ,KAAA,OAAAC,SAAA;AAAA;AAAA,SAOqBe,cAAcA,CAAA;EAAA,OAAAC,eAAA,CAAAjB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAgB,gBAAA;EAAAA,eAAA,OAAAf,kBAAA,CAAAC,OAAA,EAA7B,aAA6B;IAClC,IAAI,CAACM,oBAAW,CAACO,cAAc,EAAE;MAC/B,MAAM,IAAIN,oCAAmB,CAAC,QAAQ,EAAE,gBAAgB,CAAC;;IAE3D,MAAMD,oBAAW,CAACO,cAAc,EAAE;EACpC,CAAC;EAAA,OAAAC,eAAA,CAAAjB,KAAA,OAAAC,SAAA;AAAA"}